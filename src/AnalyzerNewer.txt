//
// File: Analyzer.cxx
//
// Author: Hunter Sullivan
//
// Description: Structure to run reconstruction on sipm data.
//

#include "Analyzer.h"
#include "TMath.h"
#include "TF1.h"
#include "TF2.h"
#include "TH2.h"
#include "TFile.h"
#include "TCanvas.h"
#include "TStyle.h"
#include "TGraph.h"
#include "TLegend.h"

namespace wheel {

Voxel::Voxel(const float& x, const float& y, const float& r, const float& theta)
 : m_x(x), m_y(y), m_r(r), m_theta(theta)
{}

Voxel::~Voxel()
{}

Analyzer::Analyzer()
{}

Analyzer::~Analyzer()
{}

void Analyzer::Reconstruct(SiPMToTriggerMap& sipmToTriggerMap, const SiPMInfoMap& sipmInfoMap, const Configuration& config, const unsigned& trigger)
{
  // Initialize voxels and containers
  std::cout << "Initializing reconstruction...\n";  
  Initialize(config);
  // Start reconstruction
  Reconstruct(sipmToTriggerMap, sipmInfoMap, trigger);
  // Make a useful plot
  MakePlot();
}

void Analyzer::Initialize(const Configuration& config)
{
  // Initialize
  m_nVoxels           = config.nVoxels;  
  m_diskRadius        = config.diskRadius;
  m_attenuationLength = config.attenuationLength;
  if (m_attenuationLength == 0) { std::cout << "Error. Please specify an attenuation length!\n"; std::exit(1); }
  m_beta              = 360/config.nSiPMs;
  m_nSiPMs            = config.nSiPMs;
  m_mlLogLikelihood   = std::numeric_limits<double>::lowest();
  m_mlRadius = 0; m_mlTheta = 0; m_mlN0 = 0; 
  m_recoOutputFile    = config.recoOutputFile;
  m_data.clear();
  // Create the voxels
  InitVoxelList();
}

void Analyzer::InitVoxelList()
{
  // Since our geometry is a circle, loop through
  // x coordinate and y coordinate creating new voxels.
  // We can do this by building the first quadrant and duplicating.
  // Positions of voxels will be their centers.
  const unsigned firstQuadWidth = std::sqrt(m_nVoxels)/2;
  const float    increment      = 2*m_diskRadius/std::sqrt(m_nVoxels);
  // We will work our way out from the origin
  float x(increment/2);

  for (unsigned voxelCounterX = 1; voxelCounterX <= firstQuadWidth; voxelCounterX++)
  {
    // Reset the y position
    float y(increment/2);
    for (unsigned voxelCounterY = 1; voxelCounterY <= firstQuadWidth; voxelCounterY++)
    {
      // Compute r and theta 
      float r        = std::sqrt(x*x + y*y);
      float thetaDeg = std::abs(TMath::ASin(y/r))*(180/TMath::Pi());

      // Create our voxels
      Voxel v1( x,  y,  r,  thetaDeg);     Voxel v2(-x,  y,  r,  thetaDeg+90);
      Voxel v3(-x, -y,  r,  thetaDeg+180); Voxel v4( x, -y,  r,  thetaDeg+270);

      // Ignore if the voxel lies outside our ROI
      if (r >= m_diskRadius) continue;

      m_voxelList.emplace_back(v1); m_voxelList.emplace_back(v2);
      m_voxelList.emplace_back(v3); m_voxelList.emplace_back(v4);

      y += increment;
    }
    x += increment;
  }
} 

void Analyzer::Reconstruct(SiPMToTriggerMap& sipmToTriggerMap, const SiPMInfoMap& sipmInfoMap, const unsigned& trigger)
{
  // Start the timer for this trigger
  clock_t start = clock();

  // First to cound number of photons in each hit
  // also N0 set to lower threshold to decrease computation time
  const auto maxSiPM_counts = InitData(sipmToTriggerMap, sipmInfoMap, trigger);
  unsigned N0 = maxSiPM_counts.second;

  std::cout << "Running MLE...\n";
  // Start main loop
  // We will cover the entire parameter space, with the cost of computation time
  while ( N0 <= 300 ) 
  {
    Handle(N0);
    N0++;
  }
 
  // We should have the ml now
  std::cout << "Max log likelihood = " << m_mlLogLikelihood << std::endl
            << "X                  = " << m_mlX             << " cm\n"
            << "Y                  = " << m_mlY             << " cm\n"
            << "Radius             = " << m_mlRadius        << " cm\n"
            << "Theta              = " << m_mlTheta         << " deg\n" 
            << "N0                 = " << m_mlN0            << " photons\n";

  // Estimate the confidence interval
  ComputeConfidenceIntervals();
 
  clock_t end = clock();
  double duration = ((double) (end - start)) / CLOCKS_PER_SEC;
  std::cout << "Run time of " << duration << " s" << std::endl;
}

void Analyzer::Handle(const unsigned& N0)
{
  for (const auto& voxel : m_voxelList)
  {
    // Log likelihood for this parameter set
    double logLikelihood = ComputeLogLikelihood(voxel.X(), voxel.Y(), N0);
    if (logLikelihood > m_mlLogLikelihood) { m_mlLogLikelihood = logLikelihood; m_mlN0 = N0; m_mlX = voxel.X(); m_mlY = voxel.Y(); m_mlRadius = voxel.R(); m_mlTheta = voxel.Theta(); } 
  }
}

double Analyzer::ComputeLogLikelihood(const float& x, const float& y, const unsigned& N0)
{
  // Convert x and y to polar coordinates 
  float r        = 0;
  float thetaDeg = 0;
  ConvertToPolar(r, thetaDeg, x, y);  

  // Sum over terms ----> k_m*ln(lambda_m) - lambda_m - ln(k_m!)
  double sum = 0;
  for (int sipm = 1; sipm <= m_nSiPMs; sipm++) 
  {
    float lambda_m = ComputeLambda(r, thetaDeg, N0, sipm);
    //std::cout << "nPhotons: " << m_data.find(m)->second << "  lambda_m " << lambda_m << "   factorial " << TMath::Factorial(m_data.find(m)->second) << "  term ";
    double term = m_data.find(sipm)->second*log(lambda_m) - lambda_m - log(TMath::Factorial(m_data.find(sipm)->second));
    //std::cout << term << std::endl;
    sum = sum + term;
  }
  return sum;
}

void Analyzer::ConvertToPolar(float& r, float& thetaDeg, const float& x, const float& y)
{
  r        = std::sqrt(x*x + y*y);
  thetaDeg = TMath::ASin(std::abs(y/r))*180/TMath::Pi();

  // Handle theta convention
  if (x < 0 && y > 0) thetaDeg += 90;
  if (x < 0 && y < 0) thetaDeg += 180;
  if (x > 0 && y < 0) thetaDeg += 270;
}

float Analyzer::ComputeLambda(const float& r, const float& thetaDeg, const unsigned& N0, const unsigned& sipm)
{
  // Assumptions:
  //    1) Only bulk absorption 
  //    2) Detection effeciency of sipms is 100%
  //
  // The equation I'll be using is...
  // 
  // I(r,theta) = (I_0/r_m)*cos(alpha)*exp(-r_m/attenuationLength)
  //
  //    1) 1/r_m term comes from this being a 2D wave from point-like source
  //    2) cos(alpha) comes from the projection onto the sipm normal axis
  //    3) Exponential term comes from bulk absorption
  
  // Compute angle between sipm normal and v = (x,y), and distance from (x,y) to sipm
  float radToDeg     = 180/TMath::Pi();
    
  float angleXYandSiPMRad = ((sipm - 1)*m_beta - thetaDeg)*(1/radToDeg);
  float sipmToXYSquared   = r*r + m_diskRadius*m_diskRadius - 2*r*m_diskRadius*TMath::Cos(angleXYandSiPMRad);
    
  // Safety here
  if (sipmToXYSquared < 0) { std::cout << "Error! Square root of negative number!\n"; return 0; } 
  float sipmToXY = std::sqrt(sipmToXYSquared);

  // Get the angle between sipmToXY and the normal for this sipm
  // Put a protection here
  float cosAngleSiPMToXYandSiPM(1);
  if (sipmToXY != 0) cosAngleSiPMToXYandSiPM = (-r*r + sipmToXYSquared + m_diskRadius*m_diskRadius)/(2*sipmToXY*m_diskRadius);
 
  float weight = N0*cosAngleSiPMToXYandSiPM*TMath::Exp(-sipmToXY/m_attenuationLength)/sipmToXY;
  //std::cout << "Weight = " << relativeWeight << "  at sipm " << sipm << " from x = " << x << " y = " << y << "  sipmToXY = " << sipmToXY << " angleXYandSIPM = " << angleXYandSiPMRad*180/TMath::Pi() << " beta = " << m_beta << "  thetaDeg = " << thetaDeg <<std::endl;
  if (weight < 0) { std::cout << "UH OH! WEIGHT < 0!!\n"; std::exit(1); }
  return weight;
}

void Analyzer::ComputeConfidenceIntervals()
{
  // Some notes:
  //
  // [x-, x+]  --> x +- c*1/sqrt(I)
  //
  // Here: c*1/sqrt(I) = m_delta.find(percent)->second
  //
  // c = 2.576 --> 99%
  // c = 2.326 --> 98%
  // c = 1.96  --> 95%
  // c = 1.645 --> 90%
  //
  // We will appoximate derivatives using standard numerical techniques.
  // We will compute the single CI, diagonalize to compute the joint CI,
  // where:
  //
  // CI = m_mlEstimate +- c*1/sqrt(-l'')
  //
  // Remember:
  // 
  // lambda ~ N0*cos(alpha)*Exp(-r/attenuationLength)/r
  //
 
  // Limit as h --> 0
  const double h = 0.01;
  std::cout << m_diskRadius/std::sqrt(m_nVoxels) << std::endl;
  
  // d2l/dx2
  double l1 = ComputeLogLikelihood(m_mlX-h, m_mlY, m_mlN0); 
  double l2 = ComputeLogLikelihood(m_mlX,   m_mlY, m_mlN0); 
  double l3 = ComputeLogLikelihood(m_mlX+h, m_mlY, m_mlN0); 
  double d2ldx2 = (-l1 + 2*l2 - l3)/(h*h);

  std::cout << l1 << " " << l2 << " " << l3 << " " << m_mlLogLikelihood << std::endl;

  // d2l/dy2
  float l4 = ComputeLogLikelihood(m_mlX, m_mlY-h, m_mlN0); 
  float l5 = ComputeLogLikelihood(m_mlX, m_mlY,   m_mlN0); 
  float l6 = ComputeLogLikelihood(m_mlX, m_mlY+h, m_mlN0); 
  float d2ldy2 = (-l4 + 2*l5 - l6)/(h*h);

  // d2l/dxdy
  float l7  = ComputeLogLikelihood(m_mlX+h, m_mlY+h, m_mlN0); 
  float l8  = ComputeLogLikelihood(m_mlX+h, m_mlY-h, m_mlN0); 
  float l9  = ComputeLogLikelihood(m_mlX-h, m_mlY+h, m_mlN0); 
  float l10 = ComputeLogLikelihood(m_mlX-h, m_mlY-h, m_mlN0); 
  float d2ldxdy = (l7 - l8 - l9 + l10)/(4*h*h);

  std::cout << d2ldx2 << " " << d2ldy2 << " " << d2ldxdy << std::endl;

  /*// Create our matrix
  double data[4] = {d2ldx2, d2ldxdy, d2ldxdy, d2ldy2};
  TMatrixD fisherMatrix(2,2);
  fisherMatrix.SetMatrixArray(data.GetArray());

  TVectorD sigmas         = fisherMatrix.GetEigenValues();
  TMatrixD eigenVecMatrix = fisherMatrix.GetEigenVectors();*/

  
 /* m_deltaX.emplace(95, 1.960/std::sqrt(sum[0]));
  m_deltaX.emplace(90, 1.645/std::sqrt(sum[0]));
  m_deltaX.emplace(68, 1.000/std::sqrt(sum[0]));

  m_deltaY.emplace(95, 1.960/std::sqrt(sum[1]));
  m_deltaY.emplace(90, 1.645/std::sqrt(sum[1])); 
  m_deltaY.emplace(68, 1.000/std::sqrt(sum[1]));


  //std::cout << m_deltaX.find(99)->second << "  " << m_deltaY.find(99)->second << std::endl;

  std::map<float, std::pair<float,float>> xBand, yBand;
  xBand.emplace( 95, std::make_pair(m_mlX-m_deltaX.find(95)->second, m_mlX+m_deltaX.find(95)->second) );  
  xBand.emplace( 90, std::make_pair(m_mlX-m_deltaX.find(90)->second, m_mlX+m_deltaX.find(90)->second) );  
  xBand.emplace( 68, std::make_pair(m_mlX-m_deltaX.find(68)->second, m_mlX+m_deltaX.find(68)->second) );   

  yBand.emplace( 95, std::make_pair(m_mlY-m_deltaY.find(95)->second, m_mlY+m_deltaY.find(95)->second) );  
  yBand.emplace( 90, std::make_pair(m_mlY-m_deltaY.find(90)->second, m_mlY+m_deltaY.find(90)->second) );  
  yBand.emplace( 68, std::make_pair(m_mlY-m_deltaY.find(68)->second, m_mlY+m_deltaY.find(68)->second) );   

  std::cout << "95% -->  (" << xBand.find(95)->second.first << ", " << xBand.find(95)->second.second << ")   (" << yBand.find(95)->second.first << "," << yBand.find(95)->second.second << ")\n";
  std::cout << "90% -->  (" << xBand.find(90)->second.first << ", " << xBand.find(90)->second.second << ")   (" << yBand.find(90)->second.first << "," << yBand.find(90)->second.second << ")\n";
  std::cout << "68% -->  (" << xBand.find(68)->second.first << ", " << xBand.find(68)->second.second << ")   (" << yBand.find(68)->second.first << "," << yBand.find(68)->second.second << ")\n"; 

  // Now we need to label each voxel according to the confidence band
  for (auto& voxel : m_voxelList)
  {
    // Do this for decreasing confidence
    voxel.SetCB(0);
    if (xBand.find(95)->second.first < voxel.X() && voxel.X() < xBand.find(95)->second.second && 
        yBand.find(95)->second.first < voxel.Y() && voxel.Y() < yBand.find(95)->second.second) {voxel.SetCB(95);}
    if (xBand.find(90)->second.first < voxel.X() && voxel.X() < xBand.find(90)->second.second &&
        yBand.find(90)->second.first < voxel.Y() && voxel.Y() < yBand.find(90)->second.second) {voxel.SetCB(90);}
    if (xBand.find(68)->second.first < voxel.X() && voxel.X() < xBand.find(68)->second.second && 
        yBand.find(68)->second.first < voxel.Y() && voxel.Y() < yBand.find(68)->second.second) {voxel.SetCB(68);} 
    //std::cout << voxel.CB() << std::endl;
  }*/
}


/*void Analyzer::ComputeConfidenceIntervals()
{
  // Some notes:
  //
  // [x-, x+]  --> x +- c*1/sqrt(I)
  //
  // Here: c*1/sqrt(I) = m_delta.find(percent)->second
  //
  // c = 2.576 --> 99%
  // c = 2.326 --> 98%
  // c = 1.96  --> 95%
  // c = 1.645 --> 90%
  //
  // Our equation is:
  //
  // I = sum_k [ (data[k]/lambda^2[k])(dlambda/dx)^2 - (1 - data[k]/lambda[k])(d^2lambda/dx2) ]
  //
  // Rememeber:
  // 
  // lambda ~ N0*cos(alpha)*Exp(-r/attenuationLength)/r
  //
 
  std::vector<float> sum(2,0);
  for (unsigned sipm = 1; sipm <= m_nSiPMs; sipm++)
  {
    // Define the 2D lambda function to evaluate 1st and 2nd derivatives
    // We need two of these to evaluate partials
    // Be careful here, variable is always x!
    std::string r_x              = "std::sqrt(x*x + "+std::to_string(m_mlX*m_mlX)+")";
    std::string thetaDeg_x       = "( TMath::ACos("+std::to_string(m_mlX)+"/"+r_x+")*180/TMath::Pi() )";
    std::string cosp_x           = "TMath::Cos( (("+std::to_string(sipm)+"-1)*"+std::to_string(m_beta)+" - "+thetaDeg_x+")*TMath::Pi()/180 )";
    std::string rBar_x           = "std::sqrt("+r_x+"*"+r_x+" + "+std::to_string(m_diskRadius)+"*"+std::to_string(m_diskRadius)+" - 2*"+r_x+"*"+std::to_string(m_diskRadius)+"*"+cosp_x+")";
    std::string cosAlpha_x       = "(("+rBar_x+"*"+rBar_x+" + "+std::to_string(m_diskRadius)+"*"+std::to_string(m_diskRadius)+" - "+r_x+"*"+r_x+")/(2*"+rBar_x+"*"+std::to_string(m_diskRadius)+"))";
    std::string lambdaXConstEquation = std::to_string(m_mlN0)+"*"+cosAlpha_x+"*TMath::Exp(-"+rBar_x+"/"+std::to_string(m_attenuationLength)+")/"+rBar_x; 

    std::cout << "r_x        = " << r_x        << "\n"
              << "thetaDeg_x = " << thetaDeg_x << "\n"
              << "cosp_x     = " << cosp_x     << "\n"
              << "rBar_x     = " << rBar_x     << "\n"
              << "cosAlpha_x = " << cosAlpha_x << "\n"
              << "lambdaXC   = " << lambdaXConstEquation << "\n\n";

    TF1 lambdaXConst("lambdaXConst", lambdaXConstEquation.c_str(), -m_diskRadius, m_diskRadius);
   
    std::string r_y            = "std::sqrt(x*x + "+std::to_string(m_mlY*m_mlY)+")";
    std::string thetaDeg_y     = "TMath::ACos(x/"+r_y+")*180/TMath::Pi()";
    std::string cosp_y         = "TMath::Cos( (("+std::to_string(sipm)+"-1)*"+std::to_string(m_beta)+" - "+thetaDeg_y+")*TMath::Pi()/180 )";
    std::string rBar_y         = "std::sqrt("+r_y+"*"+r_y+" + "+std::to_string(m_diskRadius)+"*"+std::to_string(m_diskRadius)+" - 2*"+r_y+"*"+std::to_string(m_diskRadius)+"*"+cosp_y+")";
    std::string cosAlpha_y     = "(("+rBar_y+"*"+rBar_y+" + "+std::to_string(m_diskRadius)+"*"+std::to_string(m_diskRadius)+" - "+r_y+"*"+r_y+")/(2*"+rBar_y+"*"+std::to_string(m_diskRadius)+"))";
    std::string lambdaYConstEquation = std::to_string(m_mlN0)+"*"+cosAlpha_y+"*TMath::Exp(-"+rBar_y+"/"+std::to_string(m_attenuationLength)+")/"+rBar_y; 

    TF1 lambdaYConst("lambdaYConst", lambdaYConstEquation.c_str(), -m_diskRadius, m_diskRadius);

    // Derivatives
    float dlambdadx   = lambdaYConst.Derivative(m_mlX);
    float d2lambdadx2 = lambdaYConst.Derivative2(m_mlX); 
    float dlambdady   = lambdaXConst.Derivative(m_mlY);
    float d2lambdady2 = lambdaXConst.Derivative2(m_mlY); 

    


    // We also need lambda in terms of x and y
    std::string r              = "std::sqrt(x*x + y*y)";
    std::string thetaDeg       = "TMath::ACos(x/"+r+")*180/TMath::Pi()";
    std::string cosp           = "TMath::Cos( (("+std::to_string(sipm)+"-1)*"+std::to_string(m_beta)+" - "+thetaDeg+")*TMath::Pi()/180 )";
    std::string rBar           = "std::sqrt("+r+"*"+r+" + "+std::to_string(m_diskRadius)+"*"+std::to_string(m_diskRadius)+" - 2*"+r+"*"+std::to_string(m_diskRadius)+"*"+cosp+")";
    std::string cosAlpha       = "(("+rBar+"*"+rBar+" + "+std::to_string(m_diskRadius)+"*"+std::to_string(m_diskRadius)+" - "+r+"*"+r+")/(2*"+rBar+"*"+std::to_string(m_diskRadius)+"))";
    std::string lambdaEquation = std::to_string(m_mlN0)+"*"+cosAlpha+"*TMath::Exp(-"+rBar+"/"+std::to_string(m_attenuationLength)+")/"+rBar; 

    TF2 lambda2D("lambda2D", lambdaEquation.c_str(), -m_diskRadius, m_diskRadius, -m_diskRadius, m_diskRadius);

    // Lambda evaluated at our ml estimate
    float lambda = lambda2D.Eval(m_mlX, m_mlY); 
  
    // Finally...
    //std::cout << "Sum[0] = " << sum[0] << "  Sum[1] = " << sum[1] << "  ratio = " << (m_data[sipm-1]/lambda) << std::endl;

    sum[0] += (m_data[sipm-1]/(lambda*lambda))*(dlambdadx*dlambdadx) + d2lambdadx2*(1 - (m_data[sipm-1]/lambda));
    sum[1] += (m_data[sipm-1]/(lambda*lambda))*(dlambdady*dlambdady) + d2lambdady2*(1 - (m_data[sipm-1]/lambda));
  }

    float h    = 0.0001;
    std::pair<float, float> rT;
    rT  = ConvertXYToRTheta(m_mlX+h, m_mlY+h);
    float l1 = ComputeLogLikelihood(rT.first, rT.second, m_mlN0);
    rT = ConvertXYToRTheta(m_mlX+h, m_mlY-h);
    float l2 = ComputeLogLikelihood(rT.first, rT.second, m_mlN0);
    rT  = ConvertXYToRTheta(m_mlX-h, m_mlY+h);
		float l3 = ComputeLogLikelihood(rT.first, rT.second, m_mlN0);
		rT = ConvertXYToRTheta(m_mlX-h, m_mlY-h);
		float l4 = ComputeLogLikelihood(rT.first, rT.second, m_mlN0);
    rT  = ConvertXYToRTheta(m_mlX-h, m_mlY);
    float l1 = ComputeLogLikelihood(rT.first, rT.second, m_mlN0);
    std::cout << m_mlRadius << " " << m_mlTheta << " " << rT.first << " " << rT.second << std::endl;
    rT = ConvertXYToRTheta(m_mlX+h, m_mlY);
    float l2 = ComputeLogLikelihood(rT.first, rT.second, m_mlN0);
    float fD = (-l1 + 2*m_mlLogLikelihood - l2)/(h*h);

    std::cout << l1 << " " << m_mlLogLikelihood << " " << l2 << std::endl;
 
    std::cout << "Root = " << sum[0] << "  approx = " << fD << std::endl;


  //std::cout << "Sum[0] = " << sum[0] << "  Sum[1] = " << sum[1] << std::endl;
  // The sums are our second derivatives evaluated at our ml estimate
  // [x-, x+]  --> x +- c*1/sqrt(I)
  //
  // Here: c*1/sqrt(I) = m_delta.find(percent)->second
  //
  // c = 1.96  --> 95%
  // c = 1.645 --> 90%
  // c = 1.0   --> 68%
  if (sum[0] <= 0 || sum[1] <= 0) return;

  m_deltaX.emplace(95, 1.960/std::sqrt(sum[0]));
  m_deltaX.emplace(90, 1.645/std::sqrt(sum[0]));
  m_deltaX.emplace(68, 1.000/std::sqrt(sum[0]));

  m_deltaY.emplace(95, 1.960/std::sqrt(sum[1]));
  m_deltaY.emplace(90, 1.645/std::sqrt(sum[1])); 
  m_deltaY.emplace(68, 1.000/std::sqrt(sum[1]));


  //std::cout << m_deltaX.find(99)->second << "  " << m_deltaY.find(99)->second << std::endl;

  std::map<float, std::pair<float,float>> xBand, yBand;
  xBand.emplace( 95, std::make_pair(m_mlX-m_deltaX.find(95)->second, m_mlX+m_deltaX.find(95)->second) );  
  xBand.emplace( 90, std::make_pair(m_mlX-m_deltaX.find(90)->second, m_mlX+m_deltaX.find(90)->second) );  
  xBand.emplace( 68, std::make_pair(m_mlX-m_deltaX.find(68)->second, m_mlX+m_deltaX.find(68)->second) );   

  yBand.emplace( 95, std::make_pair(m_mlY-m_deltaY.find(95)->second, m_mlY+m_deltaY.find(95)->second) );  
  yBand.emplace( 90, std::make_pair(m_mlY-m_deltaY.find(90)->second, m_mlY+m_deltaY.find(90)->second) );  
  yBand.emplace( 68, std::make_pair(m_mlY-m_deltaY.find(68)->second, m_mlY+m_deltaY.find(68)->second) );   

  std::cout << "95% -->  (" << xBand.find(95)->second.first << ", " << xBand.find(95)->second.second << ")   (" << yBand.find(95)->second.first << "," << yBand.find(95)->second.second << ")\n";
  std::cout << "90% -->  (" << xBand.find(90)->second.first << ", " << xBand.find(90)->second.second << ")   (" << yBand.find(90)->second.first << "," << yBand.find(90)->second.second << ")\n";
  std::cout << "68% -->  (" << xBand.find(68)->second.first << ", " << xBand.find(68)->second.second << ")   (" << yBand.find(68)->second.first << "," << yBand.find(68)->second.second << ")\n"; 

  // Now we need to label each voxel according to the confidence band
  for (auto& voxel : m_voxelList)
  {
    // Do this for decreasing confidence
    voxel.SetCB(0);
    if (xBand.find(95)->second.first < voxel.X() && voxel.X() < xBand.find(95)->second.second && 
        yBand.find(95)->second.first < voxel.Y() && voxel.Y() < yBand.find(95)->second.second) {voxel.SetCB(95);}
    if (xBand.find(90)->second.first < voxel.X() && voxel.X() < xBand.find(90)->second.second &&
        yBand.find(90)->second.first < voxel.Y() && voxel.Y() < yBand.find(90)->second.second) {voxel.SetCB(90);}
    if (xBand.find(68)->second.first < voxel.X() && voxel.X() < xBand.find(68)->second.second && 
        yBand.find(68)->second.first < voxel.Y() && voxel.Y() < yBand.find(68)->second.second) {voxel.SetCB(68);} 
    //std::cout << voxel.CB() << std::endl;
  }
}*/

std::pair<unsigned, unsigned> Analyzer::InitData(SiPMToTriggerMap& sipmToTriggerMap, const SiPMInfoMap& sipmInfoMap, const unsigned& trigger)
{ 
  // Which sipm saw the largest number of photons?
  unsigned maxSiPM;
  unsigned max(0);

  // Loop over all the hits and set the n of photons
  for (auto& sipm : sipmToTriggerMap)
  {
    // Get the gain and bdown for this sipm
    const float& thisGain = sipmInfoMap.find(sipm.first)->second.gain;
    const float& thisBD   = sipmInfoMap.find(sipm.first)->second.breakdown;
    // Total number for this sipm
    unsigned sipmCounts(0);
    for (auto& hit : sipm.second[0])
    {
      //std::cout << hit.hitHeight << "  " << hit.bias << "  " << thisBD << "\n";
      hit.nPhotons = std::round(hit.hitAmplitude/( thisGain*( hit.bias - thisBD ) ));   // hit.bias - thisBD
      sipmCounts += hit.nPhotons;
      //std::cout << hit.nPhotons << std::endl;
    }
    if (sipmCounts > max) { max = sipmCounts; maxSiPM = sipm.first; }

    // Store counts in data container
    m_data.emplace(sipm.first, sipmCounts);
    std::cout << "SiPM " << sipm.first << " --> " << sipmCounts << " p.e.\n";
  }

  return std::make_pair(maxSiPM, max);
}

void Analyzer::MakePlot()
{
  TFile f(m_recoOutputFile.c_str(), "UPDATE");

  // Likelihood distribution for m_mlN0
  TH2D likelihoodDist("likelihoodDist", "Likelihood Distribution", std::sqrt(m_nVoxels), -m_diskRadius, m_diskRadius, std::sqrt(m_nVoxels), -m_diskRadius, m_diskRadius); 
  // Confidence bands
  //TH2D *confidenceDist = new TH2D("confidenceDist", "confidenceDist", std::sqrt(m_nVoxels), -m_diskRadius, m_diskRadius, std::sqrt(m_nVoxels), -m_diskRadius, m_diskRadius); 
  
  for (const auto& voxel : m_voxelList)
  {
    // Log likelihood for this parameter set
    double logLikelihood = ComputeLogLikelihood(voxel.X(), voxel.Y(), m_mlN0);

    unsigned xBin = likelihoodDist.GetXaxis()->FindBin(voxel.X());
    unsigned yBin = likelihoodDist.GetXaxis()->FindBin(voxel.Y());
    likelihoodDist.SetBinContent(xBin, yBin, TMath::Exp(logLikelihood));

    //std::cout << "x = " << voxel.X() << " y = " << voxel.Y() << " cb = " << voxel.CB() << std::endl;

    //confidenceDist->SetBinContent(xBin, yBin, voxel.CB());
  }
  likelihoodDist.Write();   
  
  // Overlay the single confidence intervals
  TGraph g1(5), g2(5), g3(5);
  // 68
  g1.SetPoint(0, m_mlX+m_deltaX.find(68)->second,  m_mlY+m_deltaY.find(68)->second);  
  g1.SetPoint(1, m_mlX-m_deltaX.find(68)->second,  m_mlY+m_deltaY.find(68)->second); 
  g1.SetPoint(2, m_mlX-m_deltaX.find(68)->second,  m_mlY-m_deltaY.find(68)->second); 
  g1.SetPoint(3, m_mlX+m_deltaX.find(68)->second,  m_mlY-m_deltaY.find(68)->second); 
  g1.SetPoint(4, m_mlX+m_deltaX.find(68)->second,  m_mlY+m_deltaY.find(68)->second); 
  // 90
  g2.SetPoint(0, m_mlX+m_deltaX.find(90)->second,  m_mlY+m_deltaY.find(90)->second); 
  g2.SetPoint(1, m_mlX-m_deltaX.find(90)->second,  m_mlY+m_deltaY.find(90)->second); 
  g2.SetPoint(2, m_mlX-m_deltaX.find(90)->second,  m_mlY-m_deltaY.find(90)->second); 
  g2.SetPoint(3, m_mlX+m_deltaX.find(90)->second,  m_mlY-m_deltaY.find(90)->second); 
  g2.SetPoint(4, m_mlX+m_deltaX.find(90)->second,  m_mlY+m_deltaY.find(90)->second); 
  // 95
  g3.SetPoint(0, m_mlX+m_deltaX.find(95)->second,  m_mlY+m_deltaY.find(95)->second); 
  g3.SetPoint(1, m_mlX-m_deltaX.find(95)->second,  m_mlY+m_deltaY.find(95)->second); 
  g3.SetPoint(2, m_mlX-m_deltaX.find(95)->second,  m_mlY-m_deltaY.find(95)->second); 
  g3.SetPoint(3, m_mlX+m_deltaX.find(95)->second,  m_mlY-m_deltaY.find(95)->second);  
  g3.SetPoint(4, m_mlX+m_deltaX.find(95)->second,  m_mlY+m_deltaY.find(95)->second);  

  g1.SetLineWidth(5);
  g1.SetLineColor(33);
  g2.SetLineWidth(5);
  g2.SetLineColor(44);
  g3.SetLineWidth(5);
  g3.SetLineColor(46);

  TLegend leg(0.1,0.6,0.3,0.7); 
  leg.AddEntry(&g1, "68% CL", "l");
  leg.AddEntry(&g2, "90% CL", "l"); 
  leg.AddEntry(&g3, "95% CL", "l");  
 
  TCanvas c1("c1", "c1", 800, 800);
  likelihoodDist.Draw("colz");
  g1.Draw("same");
  g2.Draw("same");
  g3.Draw("same");
  leg.Draw("same"); 
  c1.Write();


  /*gStyle->SetOptStat(0);
  
  TCanvas c1("c1","c1",600,400);
  Int_t palette[4];
  palette[0] = 15;
  palette[1] = 20;
  palette[2] = 23;
  palette[3] = 30;
  gStyle->SetPalette(4,palette);
  // gStyle->SetPalette(kBird);

  c1.SetTitle("Likelihood Heat Map");
  confidenceDist->Draw("colz");
  //c1.Update();
 // c1.Write(); 
  //confidenceDist->Write();*/
 
  f.Close();
}
}
